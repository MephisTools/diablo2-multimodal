function debounce(fn, threshold) {
    var timeout;
    threshold = threshold || 300;
    return function debounced() {
        clearTimeout(timeout);
        var args = arguments;
        var _this = this;

        function delayed() {
            fn.apply(_this, args);
        }
        timeout = setTimeout(delayed, threshold);
    };
}
var qsRegex;
var $quicksearch = $('.quicksearch').keyup(debounce(function() {
    qsRegex = new RegExp($quicksearch.val(), 'gi');
    $grid.isotope();
}, 300));
var multiMatch;
var singleMatch;
var $grid = $('.grid').imagesLoaded(function() {
    $grid.isotope({});
});
var $grid = $('.grid').isotope({
    itemSelector: '.element-item-vt',
    layoutMode: 'packery',
    packery: {
        gutter: '.gutter-sizer-vt'
    },
    getSortData: {
        views: '.z-sort-views parseInt',
        comments: '.z-sort-comments parseInt',
        likes: '.z-sort-likes parseInt',
        name: '.z-sort-name',
        lastpost: '.z-sort-lastpost',
        qualitylvl: '.zso_qualitylvl parseInt',
        trclass: '.zso_trclass',
        rqlevel: '.zso_rqlevel parseInt',
        rqstr: '.zso_rqstr parseInt',
        rqdex: '.zso_rqdex',
        defense: '.zso_defense parseInt',
        durability: '.zso_durability',
        baseblock: '.zso_baseblock',
        twohdamage: '.zso_twohdamage',
        onehdamage: '.zso_onehdamage',
        throwdamage: '.zso_throwdamage parseInt',
        basespeed: '.zso_basespeed',
        rwlvlrq: '.zso_rwlvlrq',
        rwsock: '.zso_rwsock',
        rwpatch: '.zso_rwpatch',
        maxsock: '.zso_maxsock',
        sklevel: '.zso_sklevel',
        xp: '.zso_xp',
        mlvl: '.zso_mlvl',
        mtrclass: '.zso_mtrclass',
        alvl: '.zso_alvl',
        qorder: '.z-quest-order',
        age: 'z-firstpost parseInt'
    },
    transitionDuration: 0,
    percentPosition: true,
    stamp: '.stamp'
});
var iso = $grid.data('isotope');
var $filterCount = $('.filter-count');
$grid.imagesLoaded().progress(function() {
    window.setTimeout(relayout, 300);
    updateFilterCount();
});
var filters = [];
$('.filters').on('click', '.z-btn-i', function(event) {
    var $target = $(event.currentTarget);
    $target.toggleClass('is-checked');
    var isChecked = $target.hasClass('is-checked');
    var filter = $target.attr('data-marker');
    if (isChecked) {
        addFilter(filter);
    } else {
        removeFilter(filter);
    }
    if (filters.length === 0) {
        multiMatch = '';
    } else {
        multiMatch = filters.map(m => new RegExp("\\b(" + m + ")", 'mi'));
    }
    $(".grid").unmark(filters, {
        "accuracy": "partially",
        "separateWordSearch": false,
        "ignorePunctuation": [","],
        "ignoreJoiners": true,
        "acrossElements": true,
        "debug": true,
        "wildcards": "with-spaces"
    });
    $(".grid").mark(filters, {
        "accuracy": "partially",
        "separateWordSearch": false,
        "ignorePunctuation": [","],
        "ignoreJoiners": true,
        "acrossElements": true,
        "debug": true,
        "wildcards": "with-spaces"
    });
    console.log(filters)
    $(".z-btn-orig-vf").each(function() {
        var target = "." + $(this).data("target");
        var numCount = $(target).find('.is-checked').length;
        if (numCount > 0) {
            $(this).find('.z-numcount').html(numCount);
            $(this).find('.z-numcount').addClass('z-count-badge');
        } else {
            $(this).find('.z-numcount').removeClass('z-count-badge');
            $(this).find('.z-numcount').html('');
        }
    });
    var printfilters = filters.length ? filters.join(', ') : '';
    var regexfirst = /^[.]/g;
    var regexdot = /[.]/g;
    var regexscore = /[_]/g;
    var regexslash = /[\\\\]/g;
    printfilters = printfilters.replace(regexfirst, '');
    printfilters = printfilters.replace(regexscore, ' ');
    printfilters = printfilters.replace(regexslash, '');
    $('#output').text(printfilters);
    location.hash = 'filter=' + encodeURIComponent(filters.join(', '));
});
$(document).ready(function() {
    function onHashchange() {
        var hashFilter = getHashFilter();
        $grid.isotope({
            filter: function() {
                var $this = $(this);
                var searchResult = qsRegex ? $this.text().match(qsRegex) : true;
                var multiResult = multiMatch ? multiMatch.every(regex => regex.test($this.text())) : true;
                return searchResult && multiResult;
            }
        });
        updateFilterCount();
    };
    $grid.on('arrangeComplete', function(event, filteredItems) {
        if (filteredItems.length == 0) {
            $(".no-results").addClass('z-shown');
        } else {
            $(".no-results").removeClass('z-shown');
        }
    });
    $(window).on('hashchange', onHashchange);
    onHashchange();
    var hashFilter = getHashFilter();
    if (hashFilter) {
        var filters = hashFilter.split(', ');
        filters.forEach(function(filter) {
            var $checkbox = $('.button').filter('[data-marker="' + filter + '"]');
            $checkbox.addClass('is-checked');
            if (filters.length === 0) {
                multiMatch = '';
            } else {
                multiMatch = filters.map(m => new RegExp("\\b(" + m + ")", 'mi'));
            }
            $(".z-btn-orig-vf").each(function() {
                var target = "." + $(this).data("target");
                var numCount = $(target).find('.is-checked').length;
                if (numCount > 0) {
                    $(this).find('.z-numcount').html(numCount);
                    $(this).find('.z-numcount').addClass('z-count-badge');
                } else {
                    $(this).find('.z-numcount').removeClass('z-count-badge');
                    $(this).find('.z-numcount').html('');
                }
            });
            var initfilters = filters.join(', ');
            $('#output').text(initfilters);
            var filterNum = filters.length;
            if (filterNum > 0) {
                $('.z-numcount').sort(function(a, b) {
                    return $(b).text() - $(a).text();
                }).first().addClass('z-hashopen');
                var targetlargestbut = $('.z-hashopen').closest('.z-btn-orig-vf');
                $(targetlargestbut).addClass('is-checked');
                $(document).ready(function() {
                    $('.grid').mark(filters, {
                        "accuracy": "exactly",
                        "separateWordSearch": false,
                        "ignorePunctuation": [","]
                    });
                });
            }
        });
    }

    function getHashFilter() {
        var hash = location.hash;
        var matches = location.hash.match(/filter=([^&]+)/i);
        if (!matches) {
            return '';
        }
        return decodeURIComponent(matches[1]);
    }
});

function addFilter(filter) {
    if (filters.indexOf(filter) == -1) {
        filters.push(filter);
    }
}

function removeFilter(filter) {
    var index = filters.indexOf(filter);
    if (index != -1) {
        filters.splice(index, 1);
    }
}

function updateFilterCount() {
    if (iso.filteredItems.length === 1) {
        $filterCount.text(iso.filteredItems.length + ' entry');
    } else {
        $filterCount.text(iso.filteredItems.length + ' entries');
    }
}
$(".clear").click(function() {
    $(".z-btn-i, .z-btn-it").each(function(filter) {
        $(this).removeClass("is-checked");
        filters = [];
        hashFilter = '';
        multiMatch = '';
    })
    $(".element-item-vt").unmark();
    location.hash = 'filter=' + encodeURIComponent(filters.join(''));
    $('.z-numcount').html('');
    $('.z-numcount').removeClass('z-count-badge');
    $('.z-items').removeClass('z-shown');
    $('.z-btn-orig-vf').removeClass('is-checked');
    $('.z-actions').find(".button").removeClass('is-checked');
    $('.quicksearch').val('');
    $(".quicksearch").keyup();
    $('#output').empty();

    function resettick() {
        $('.z-reset').removeClass('z-copied-green');
        $('.z-reset').removeClass('is-checked');
        $('.z-reset').html('<i class="fas fa-undo-alt"></i><span class="z-space"></span><span class="z-space"></span>Reset');
    }
    $('.z-reset').addClass('z-copied-green');
    $(".z-reset").html('<i class="fas fa-check"></i><span class="z-space"></span><span class="z-space"></span>Filters reset');
    window.setTimeout(resettick, 750);

    function resettick2() {
        $('.z-reset').html('<i class="fas fa-undo-alt"></i><span class="z-space"></span><span class="z-space"></span>Reset');
    }
    window.setTimeout(resettick2, 750);
    $grid.isotope({
        sortBy: 'lastpost',
        sortAscending: false
    })
});
var detailed = $('.z-detailed-view');
var compact = $('.z-compact-view');
$('.z-detailed-view').on('click', function(e) {
    $("#z-view").attr('href', 'styles/zulu/theme/detailed.css');
    localStorage.setItem('view', "styles/zulu/theme/detailed.css");
    localStorage.setItem('viewsheet', "styles/zulu/theme/detailed.css");
    detailed.addClass('is-checked');
    compact.removeClass('is-checked');
    $grid.isotope('layout');
    window.setTimeout(relayout, 300);
});
$('.z-compact-view').on('click', function(e) {
    compact.addClass('is-checked');
    detailed.removeClass('is-checked');
    var view = localStorage.getItem('viewsb');
    if (view == 'styles/zulu/theme/hidden-sidebar.css') {
        $("#z-view").attr('href', 'styles/zulu/theme/sbhidden-compact.css');
        localStorage.setItem('view', "styles/zulu/theme/sbhidden-compact.css");
        localStorage.setItem('viewsheet', "styles/zulu/theme/sbhidden-compact.css");
        $grid.isotope('layout');
        window.setTimeout(relayout, 300);
    } else {
        $("#z-view").attr('href', 'styles/zulu/theme/compact.min.css');
        localStorage.setItem('view', "styles/zulu/theme/compact.min.css");
        $grid.isotope('layout');
        window.setTimeout(relayout, 300);
    }
});

function bringbackblizz() {
    $('.z-blizzbut').removeClass('z-sets-title');
    $('.z-blizzbut').html('Bnet');
    $grid.isotope();
}
$('.z-copy-blizz').on('click', function() {
    var $temp = $("<input>");
    var $url = $(this).closest('.element-item').find('.z-copy-blizz-value').html();
    $("body").append($temp);
    $temp.val($url).select();
    document.execCommand("copy");
    $temp.remove();
    $(this).addClass('is-checked');
    $(this).closest('.element-item').find('.z-blizzbut').html('Copied!');
    $(this).closest('.element-item').find('.z-blizzbut').addClass('z-sets-title');
    $grid.isotope();
    window.setTimeout(bringbackblizz, 1500);
})

function bringbackdisc() {
    $('.z-discordbut').removeClass('z-sets-title');
    $('.z-discordbut').html('Disc');
    $grid.isotope();
}
$('.z-copy-disc').on('click', function() {
    var $temp = $("<input>");
    var $url = $(this).closest('.element-item').find('.z-copy-disc-value').html();
    $("body").append($temp);
    $temp.val($url).select();
    document.execCommand("copy");
    $temp.remove();
    $(this).addClass('is-checked');
    $(this).closest('.element-item').find('.z-discordbut').html('Copied!');
    $(this).closest('.element-item').find('.z-discordbut').addClass('z-sets-title');
    $grid.isotope();
    window.setTimeout(bringbackdisc, 1500);
})
$('.z-shuffle-btn').on('click', function() {
    $grid.isotope('shuffle');
    $('.z-sorts > button').removeClass('is-checked');
});
$('.z-sort-lastpost-btn').on('click', function() {
    $grid.isotope({
        sortBy: 'lastpost',
        sortAscending: false
    })
    $('.z-sorts > button').removeClass('is-checked');
});
$('.z-sort-views-btn').on('click', function() {
    $grid.isotope({
        sortBy: 'views',
        sortAscending: false
    })
    $('.z-sorts > button').removeClass('is-checked');
});
$('.z-sort-comments-btn').on('click', function() {
    $grid.isotope({
        sortBy: 'comments',
        sortAscending: false
    })
    $('.z-sorts > button').removeClass('is-checked');
});
$('.z-sort-likes-btn').on('click', function() {
    $grid.isotope({
        sortBy: 'likes',
        sortAscending: false
    })
    $('.z-sorts > button').removeClass('is-checked');
});
$('.z-sort-name-btn').on('click', function() {
    $grid.isotope({
        sortBy: 'name',
        sortAscending: true
    })
    $('.z-sorts > button').removeClass('is-checked');
});
$('.z-sort-qualitylvl-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'qualitylvl',
        sortAscending: false
    });
});
$('.z-sort-trclass-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'trclass',
        sortAscending: false
    })
});
$('.z-sort-maxsock-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'maxsock',
        sortAscending: false
    })
});
$('.z-sort-rqlevel-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'rqlevel',
        sortAscending: false
    });
});
$('.z-sort-rqstr-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'rqstr',
        sortAscending: false
    });
});
$('.z-sort-rqdex-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'rqdex',
        sortAscending: false
    });
});
$('.z-sort-defense-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'defense',
        sortAscending: false
    });
});
$('.z-sort-durability-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'durability',
        sortAscending: false
    });
});
$('.z-sort-baseblock-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'baseblock',
        sortAscending: false
    });
});
$('.z-sort-twohdamage-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'twohdamage',
        sortAscending: false
    });
});
$('.z-sort-onehdamage-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'onehdamage',
        sortAscending: false
    });
});
$('.z-sort-throwdamage-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'throwdamage',
        sortAscending: false
    });
});
$('.z-sort-basespeed-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'basespeed',
        sortAscending: true
    });
});
$('.z-sort-rwlvlrq-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'rwlvlrq',
        sortAscending: false
    });
});
$('.z-sort-rwsock-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'rwsock',
        sortAscending: false
    });
});
$('.z-sort-rwpatch-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'rwpatch',
        sortAscending: false
    });
});
$('.z-sort-sklevel-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'sklevel',
        sortAscending: false
    });
});
$('.z-sort-xp-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'xp',
        sortAscending: false
    });
});
$('.z-sort-mlvl-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'mlvl',
        sortAscending: false
    });
});
$('.z-sort-mtrclass-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'mtrclass',
        sortAscending: false
    });
});
$('.z-sort-alvl-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'alvl',
        sortAscending: false
    });
});
$('.z-sort-qorder-btn').on('click', function() {
    $('.z-sorts > button').removeClass('is-checked');
    $grid.isotope({
        sortBy: 'qorder',
        sortAscending: true
    });
});
$('.z-notwice').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-questy > button').removeClass('is-checked');
        let values = ["Act 1", "Act 2", "Act 3", "Act 4", "Act 5"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-npcy > button').removeClass('is-checked');
        let values = ["Act 1", "Act 2", "Act 3", "Act 4", "Act 5"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-areay > button').removeClass('is-checked');
        let values = ["Open Area", "Underground Area", "Secret Area", "Town Area", "Act 1", "Act 2", "Act 3", "Act 4", "Act 5", "Has waypoint"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-monsty > button').removeClass('is-checked');
        let values = ["Boss", "Superunique", "Monster", "Act 1", "Act 2", "Act 3", "Act 4", "Act 5", "Fire Immune", "Cold Immune", "Lightning Immune", "Poison Immune", "Magic Immune", "Animal", "Demon", "Undead"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-classy > button').removeClass('is-checked');
        let values = ["Amazon", "Assassin", "Necromancer", "Barbarian", "Sorceress", "Paladin", "Druid"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-types > button').removeClass('is-checked');
        let values = ["Amulets", "Body Armor", "Barb Helms", "Belts", "Boots", "Gloves", "Helms", "Pelts", "Rings", "Shrunken Heads", "Shields", "Targes", "Charms", "Jewels", "Axes", "Katars", "Daggers", "Swords", "Hammers", "Mauls", "Maces", "Clubs", "Scepters", "Polearms", "Spears", "Bows", "Crossbows", "Javelins", "Throwing Weapons", "Orbs", "Staves", "Wand", "Wands", "Weapons", "Melee Weapons", "Missile Weapons", "Paladin Shields", "Rune", "Gem", "Potion", "Throwing Potion", "Quest Item", "Consumable", "Miscellaneous Item", "Crafted Item"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice-sets').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-sets > button').removeClass('is-checked');
        let values = ["Angelic Raiment", "Arcanna's Tricks", "Arctic Gear", "Berserker's Arsenal", "Cathan's Traps", "Civerb's Vestments", "Cleglaw's Brace", "Death's Disguise", "Hsarus' Defense", "Infernal Tools", "Iratha's Finery", "Isenhart's Armory", "Milabrega's Regalia", "Sigon's Complete Steel", "Tancred's Battlegear", "Vidala's Rig", "Aldur's Watchtower", "Bul-Kathos' Children", "Cow King's Leathers", "The Disciple", "Griswold's Legacy", "Heaven's Brethren", "Hwanin's Majesty", "Immortal King", "M'avina's Battle Hymn", "Natalya's Odium", "Naj's Ancient Vestige", "Orphan's Call", "Sander's Folly", "Sazabi's Grand Tribute", "Tal Rasha's Wrappings", "Trang-Oul's Avatar"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice-skills').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-skills > button').removeClass('is-checked');
        let values = ["All skills", "Amazon skill levels", "Bow and crossbow skills", "Javelin and Spear skills", "Barbarian skill levels", "Combat skills \\(Barbarian only\\)", "Warcries", "Masteries", "Paladin skill levels", "Combat skills \\(Paladin only\\)", "Necromancer skill levels", "Poison and Bone skills", "Summoning skills \\(Necromancer Only\\)", "Curses skills", "Sorceress skill levels", "Fire skill", "Lightning skill", "Cold skill", "Assassin skill levels", "Shadow Disciplines", "Martial Arts skills", "Druid skill levels", "Shape Shifting skills", "Elemental skills"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice-misc').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-miscy > button').removeClass('is-checked');
        let values = ["Patch 1.07", "Patch 1.08", "Patch 1.09", "Patch 1.10", "Patch 1.11", "Patch 1.12", "Patch 1.13", "Patch 1.14", "Amazon equip only", "Barbarian equip only", "Paladin equip only", "Necromancer equip only", "Sorceress equip only", "Assassin equip only", "Druid equip only"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice-resulegacy').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-trade-resulegacy > button').removeClass('is-checked');
        let values = ["D2 Resurrected", "D2 Legacy"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice-platform').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-trade-platform > button').removeClass('is-checked');
        let values = ["PC player", "Switch player", "Playstation player", "Xbox player"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice-region').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-trade-region > button').removeClass('is-checked');
        let values = ["Americas region", "Europe region", "Asia region"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice-xpacclassic').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-trade-xpacclassic > button').removeClass('is-checked');
        let values = ["Expansion character", "Classic character"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice-hcladder').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-trade-hcladder > button').removeClass('is-checked');
        let values = ["Ladder character", "Hardcore character"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice-rarity').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-trade-rarity > button').removeClass('is-checked');
        let values = ["Unique quality", "Runeword quality", "Set quality", "Base quality", "Magic or Other quality", "Crafted quality"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice-itype').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-trade-itype > button').removeClass('is-checked');
        let values = ["Armor type", "Weapon type", "Other type"];
        filters = filters.filter(item => !values.includes(item));
    }
});
$('.z-notwice-sold').on('click', function() {
    var checkedalready = $(this).hasClass('is-checked');
    if (checkedalready) {} else {
        $('.z-trade-sold > button').removeClass('is-checked');
        let values = ["Active trades only", "Sold trades only", "My trades only"];
        filters = filters.filter(item => !values.includes(item));
    }
});

function relayout() {
    $grid.isotope();
}